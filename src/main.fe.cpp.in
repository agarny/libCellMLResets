#include "common.h"

extern "C" {
#include "model.h"
}

// Create our various arrays.

double voi = 0.0;
double *states = createStatesArray();
double *rates = createStatesArray();
double *constants = createConstantsArray();
double *computedConstants = createComputedConstantsArray();
double *algebraic = createAlgebraicArray();
double *resetConditions = createResetConditionsArray();

void computeModel(double step, double voiEnd)
{
    // Compute f(t_n, Y_n).

    computeRates(voi, states, rates, constants, computedConstants, algebraic);

    // Compute Y_n+1.

    for (size_t i = 0; i < STATE_COUNT; ++i) {
        states[i] += step * rates[i];
    }

    // Update the VOI.

    voi = voiEnd;

    // Compute our variables.

    computeVariables(voi, states, rates, constants, computedConstants, algebraic);
}

int main()
{
    // Initialise our states, rates, constants, computed constants, and algebraic variables and output their initial
    // value/guess.

    initialiseVariables(states, rates, constants, computedConstants, algebraic);
    computeComputedConstants(constants, computedConstants);
    computeRates(voi, states, rates, constants, computedConstants, algebraic);
    computeVariables(voi, states, rates, constants, computedConstants, algebraic);

    std::ofstream file("@EXECUTABLE_SOLVER@.csv");

    printHeaders(file);

    // Run our model.

    double voiMax = @ENDING_POINT@;
    size_t voiIntervalCounter = 0;
    double voiInterval = @POINT_INTERVAL@;
    double step = @STEP@;

    printValues(file, voi, states, constants, computedConstants, algebraic);

    do {
        size_t voiCounter = 0;
        double fromVoi = voi;
        double voiEnd = (++voiIntervalCounter * voiInterval > voiMax) ? voiMax : voi + voiInterval;
        double realStep = step;

        do {
            // Determine what realStep and toVoi should be.

            double toVoi = fromVoi + ++voiCounter * step;

            if (toVoi > voiEnd) {
                realStep = voiEnd - voi;
                toVoi = voiEnd;
            }

            // Compute the model.

            computeModel(realStep, toVoi);

            // Check for resets.

            do {
                int ret = applyResets(voi, states, rates, constants, computedConstants, algebraic, resetConditions);

                if (ret == 0) {
                    break;
                } else if (ret == 1) {
                    computeVariables(voi, states, rates, constants, computedConstants, algebraic);
                }
            } while (true);
        } while (voi < voiEnd);

        // Output the value of our states, constants, computed constants, and algebraic variables.

        printValues(file, voi, states, constants, computedConstants, algebraic);
    } while (voi < voiMax);

    file.close();

    // Clean up after ourselves.

    deleteArray(states);
    deleteArray(rates);
    deleteArray(constants);
    deleteArray(computedConstants);
    deleteArray(algebraic);
    deleteArray(resetConditions);

    return 0;
}
