#include "common.h"

extern "C" {
#include "model.h"
}

// Create our various arrays.

double voi = 0.0;
double *states = createStatesArray();
double *rates = createStatesArray();
double *constants = createConstantsArray();
double *computedConstants = createComputedConstantsArray();
double *algebraic = createAlgebraicArray();
double *resets = createResetsArray();
double oldVoi = NAN;
double *oldStates = createStatesArray();
double *oldRates = createStatesArray();
double *oldConstants = createConstantsArray();
double *oldComputedConstants = createComputedConstantsArray();
double *oldAlgebraic = createAlgebraicArray();
double *oldResets = createResetsArray();

enum {
    SizeOfDouble = sizeof(double)
};

void backupData()
{
    oldVoi = voi;
    memcpy(oldStates, states, STATE_COUNT * SizeOfDouble);
    memcpy(oldRates, rates, STATE_COUNT * SizeOfDouble);
    memcpy(oldConstants, constants, CONSTANT_COUNT * SizeOfDouble);
    memcpy(oldComputedConstants, computedConstants, COMPUTED_CONSTANT_COUNT * SizeOfDouble);
    memcpy(oldAlgebraic, algebraic, ALGEBRAIC_COUNT * SizeOfDouble);
}

void retrieveData()
{
    voi = oldVoi;
    memcpy(states, oldStates, STATE_COUNT * SizeOfDouble);
    memcpy(rates, oldRates, STATE_COUNT * SizeOfDouble);
    memcpy(constants, oldConstants, CONSTANT_COUNT * SizeOfDouble);
    memcpy(computedConstants, oldComputedConstants, COMPUTED_CONSTANT_COUNT * SizeOfDouble);
    memcpy(algebraic, oldAlgebraic, ALGEBRAIC_COUNT * SizeOfDouble);
}

void computeModel(double step, double voiEnd)
{
    // Compute f(t_n, Y_n).

    computeRates(voi, states, rates, constants, computedConstants, algebraic);

    // Compute Y_n+1.

    for (size_t i = 0; i < STATE_COUNT; ++i) {
        states[i] += step * rates[i];
    }

    // Update the VOI.

    voi = voiEnd;

    // Compute our variables.

    computeVariables(voi, states, rates, constants, computedConstants, algebraic);
}

int isNearlyZero(double value)
{
    return fabs(value) <= 1e-7;
}

int sign(double value)
{
    if (value > 0.0) {
        return 1;
    }

    if (value < 0.0) {
        return -1;
    }

    return 0;
}

int checkResets()
{
    int res = 0;

    computeResets(voi, states, constants, computedConstants, algebraic, resets);

    for (size_t i = 0; i < RESET_COUNT; ++i) {
        if (isNearlyZero(resets[i])) {
            applyReset(voi, states, constants, computedConstants, algebraic, i);

            res = 1;

            break;
        } else if (!isnan(oldResets[i]) && (sign(oldResets[i]) != sign(resets[i]))) {
            res = 2;

            break;
        }
    }

    if (res == 0) {
        memcpy(oldResets, resets, RESET_COUNT * SizeOfDouble);
    } else if (res == 1) {
        memset(oldResets, NAN, RESET_COUNT * SizeOfDouble);
    }

    return res;
}

int main()
{
    // Initialise our states, rates, constants, computed constants, and algebraic variables and output their initial
    // value/guess.

    initialiseVariables(states, rates, constants, computedConstants, algebraic);
    computeComputedConstants(constants, computedConstants);
    computeRates(voi, states, rates, constants, computedConstants, algebraic);
    computeVariables(voi, states, rates, constants, computedConstants, algebraic);

    std::ofstream file("@EXECUTABLE_SOLVER@.csv");

    printHeaders(file);

    // Check for resets at the start of the simulation.

    checkResets();

    // Run our model.

    double voiMax = @ENDING_POINT@;
    size_t voiIntervalCounter = 0;
    double voiInterval = @POINT_INTERVAL@;
    double step = @STEP@;

    printValues(file, voi, states, constants, computedConstants, algebraic);

    do {
        size_t voiCounter = 0;
        double fromVoi = voi;
        double voiEnd = (++voiIntervalCounter * voiInterval > voiMax) ? voiMax : voi + voiInterval;
        double realStep;

        do {
            // Backup our data.

            backupData();

            // Determine what realStep and toVoi should be.

            double toVoi = fromVoi + ++voiCounter * step;

            if (toVoi > voiEnd) {
                realStep = voiEnd - voi;
                toVoi = voiEnd;
            } else {
                realStep = step;
            }

            do {
                // Compute the model.

                computeModel(realStep, toVoi);

                // Check for resets.

                do {
                    int res = checkResets();

                    if (res == 0) {
                        break;
                    } else if (res == 1) {
                        computeVariables(voi, states, rates, constants, computedConstants, algebraic);
                    } else { // res == 2.
                        // The reset condition has changed sign, so we need to determine the point at which it did. We
                        // do this using a binary search algorithm.

                        double lVoi = oldVoi;
                        double rVoi = voi;

                        while (true) {
                            retrieveData();

                            double midVoi = 0.5 * (lVoi + rVoi);

                            computeModel(midVoi - voi, midVoi);

                            int midRet = checkResets();

                            if (midRet == 1) {
                                // We have found the point at which the reset condition changed sign, so we now need to
                                // finish computing the model until toVoi.

                                realStep = toVoi - midVoi;

                                break;
                            } else if (midRet == 0) {
                                lVoi = midVoi;
                            } else { // midRet == 2.
                                rVoi = midVoi;
                            }
                        }
                    }
                } while (true);
            } while (voi < toVoi);
        } while (voi < voiEnd);

        // Output the value of our states, constants, computed constants, and algebraic variables.

        printValues(file, voi, states, constants, computedConstants, algebraic);
    } while (voi < voiMax);

    file.close();

    // Clean up after ourselves.

    deleteArray(states);
    deleteArray(rates);
    deleteArray(constants);
    deleteArray(computedConstants);
    deleteArray(algebraic);
    deleteArray(resets);
    deleteArray(oldStates);
    deleteArray(oldRates);
    deleteArray(oldConstants);
    deleteArray(oldComputedConstants);
    deleteArray(oldAlgebraic);
    deleteArray(oldResets);

    return 0;
}
