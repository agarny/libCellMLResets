#include "common.h"

extern "C" {
#include "model.h"
}

#include <cvode/cvode.h>
#include <nvector/nvector_serial.h>
#include <sunlinsol/sunlinsol_dense.h>

typedef struct {
    void (*computeRates)(double, double *, double *, double *, double *, double *);

    double *constants;
    double *computedConstants;
    double *algebraic;
} UserOdeData;

int func(double voi, N_Vector y, N_Vector yDot, void *userData)
{
    UserOdeData *realUserData = (UserOdeData *) userData;

    realUserData->computeRates(voi, N_VGetArrayPointer_Serial(y), N_VGetArrayPointer_Serial(yDot), realUserData->constants, realUserData->computedConstants, realUserData->algebraic);

    return 0;
}

int main()
{
    // Create our various arrays.

    double voi = 0.0;
    double *states = createStatesArray();
    double *rates = createStatesArray();
    double *constants = createConstantsArray();
    double *computedConstants = createComputedConstantsArray();
    double *algebraic = createAlgebraicArray();
    double *resetConditions = createResetConditionsArray();

    // Initialise our states, rates, constants, computed constants, and algebraic variables and output their initial
    // value/guess.

    initialiseVariables(states, rates, constants, computedConstants, algebraic);
    computeComputedConstants(constants, computedConstants);
    computeRates(voi, states, rates, constants, computedConstants, algebraic);
    computeVariables(voi, states, rates, constants, computedConstants, algebraic);

    std::ofstream file("@EXECUTABLE_SOLVER@.csv");

    printHeaders(file);

    // Create our SUNDIALS context.

    SUNContext context;

    SUNContext_Create(0, &context);

    // Create our CVODE solver.

    void *solver = CVodeCreate(CV_BDF, context);

    // Initialise our CVODE solver.

    N_Vector y = N_VMake_Serial(STATE_COUNT, states, context);

    CVodeInit(solver, func, voi, y);

    // Set our user data.

    UserOdeData userData = { computeRates, constants, computedConstants, algebraic };

    CVodeSetUserData(solver, &userData);

    // Set our maximum number of steps.

    CVodeSetMaxNumSteps(solver, 99999);

    // Set our linear solver.

    SUNMatrix matrix = SUNDenseMatrix(STATE_COUNT, STATE_COUNT, context);
    SUNLinearSolver linearSolver = SUNLinSol_Dense(y, matrix, context);

    CVodeSetLinearSolver(solver, linearSolver, matrix);

    // Set our relative and absolute tolerances.

    CVodeSStolerances(solver, 1.0e-7, 1.0e-7);

    // Run our model.

    size_t i = 0;
    double voiMax = @ENDING_POINT@;
    double voiInterval = @POINT_INTERVAL@;

    printValues(file, voi, states, constants, computedConstants, algebraic);

    do {
        // Integrate our model.

        CVode(solver, (++i * voiInterval > voiMax) ? voiMax : i * voiInterval, y, &voi, CV_NORMAL);

        // Compute our variables.

        computeVariables(voi, states, rates, constants, computedConstants, algebraic);

        // Check for resets.

        do {
            int ret = applyResets(voi, states, rates, constants, computedConstants, algebraic, resetConditions);

            if (ret == 0) {
                break;
            } else if (ret == 1) {
                CVodeReInit(solver, voi, y);

                computeVariables(voi, states, rates, constants, computedConstants, algebraic);
            }
        } while (true);

        // Output the value of our states, constants, computed constants, and algebraic variables.

        printValues(file, voi, states, constants, computedConstants, algebraic);
    } while (voi < voiMax);

    file.close();

    // Clean up after ourselves.

    SUNLinSolFree(linearSolver);
    SUNMatDestroy(matrix);
    N_VDestroy_Serial(y);
    CVodeFree(&solver);
    SUNContext_Free(&context);

    deleteArray(states);
    deleteArray(rates);
    deleteArray(constants);
    deleteArray(computedConstants);
    deleteArray(algebraic);
    deleteArray(resetConditions);

    return 0;
}
